---
- name: Ensure user's meza-ansible and alt-meza-ansible in group "wheel"
  user:
    name: "{{ item }}"
    # primary group
    group: wheel
    move_home: yes
    home: "{{ m_home }}/{{ item }}"
  with_items:
  - meza-ansible
  - alt-meza-ansible

- name: Ensure user alt-meza-ansible .ssh dir configured
  file:
    path: "{{ m_home }}/alt-meza-ansible/.ssh"
    owner: alt-meza-ansible
    group: wheel
    mode: 0700
    state: directory

- name: Copy meza-ansible authorized_keys to alt-meza-ansible
  shell: cp {{ m_home }}/meza-ansible/.ssh/authorized_keys {{ m_home }}/alt-meza-ansible/.ssh/authorized_keys

- name: Ensure user meza-ansible and alt-meza-ansible authorized_keys configured
  file:
    path: "{{ m_home }}/{{ item }}/.ssh/authorized_keys"
    owner: "{{ item }}"
    group: wheel
    mode: 0644
  with_items:
  - meza-ansible
  - alt-meza-ansible

- name: Set authorized key for alt-meza-ansible
  authorized_key:
    user: alt-meza-ansible
    state: present
    key: "{{ lookup('file', '{{ m_home }}/meza-ansible/.ssh/id_rsa.pub') }}"

- name: Ensure no password on alt-meza-ansible user
  shell: passwd --delete alt-meza-ansible
  failed_when: False

- name: Ensure /etc/sudoers.d/meza-ansible in place
  template:
    src: "sudoers_meza-ansible.j2"
    dest: "{{ m_meza_sudeoers_file }}"
    owner: root
    group: root
    mode: "0644"

- name: "Ensure deltarpm is installed and latest (RedHat only)"
  yum: name=deltarpm state=latest
  when: ansible_os_family == "RedHat"
  tags:
  - latest

- name: Ensure apt cache updated (Debian only)
  apt:
    update_cache: yes
  when: ansible_os_family == "Debian"

- name: Ensure aptitude installed in order to use Ansible 'package' (Debian only)
  apt:
    name: aptitude
    state: present
    force_apt_get: yes
  when: ansible_os_family == "Debian"

- name: upgrade all packages
  package: name=* state=latest
  environment:
    # If `install_ms_sql_driver: True` is set in config, MS SQL drivers will be
    # installed. When these drivers are updated they require accepting end user
    # license agreements.
    ACCEPT_EULA: 'y'
  tags:
  - latest

# FIXME #807: for RedHat may need to enable "Optional RPMs"
- name: Ensure EPEL installed via epel-release package (CentOS only)
  yum:
    name: epel-release
    state: present
  when: ansible_distribution == "CentOS"
  tags:
  - latest

- name: Check if EPEL repo is already configured (RedHat only)
  stat:
    path: "/etc/yum.repos.d/epel.repo"
  register: epel_repofile_result
  when: ansible_distribution == "RedHat"
  tags:
  - latest

- name: Ensure EPEL installed via URL (RedHat only)
  yum:
    name: "https://dl.fedoraproject.org/pub/epel/epel-release-latest-{{ ansible_distribution_major_version }}.noarch.rpm"
    state: present
  register: result
  until: '"failed" not in result'
  retries: 5
  delay: 10
  when: ansible_distribution == "RedHat" and not epel_repofile_result.stat.exists
  tags:
  - latest

- name: Import EPEL GPG key (RedHat only)
  rpm_key:
    key: "/etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-{{ ansible_distribution_major_version }}"
    state: present
  when: ansible_distribution == "RedHat" and not epel_repofile_result.stat.exists
  ignore_errors: "{{ ansible_check_mode }}"
  tags:
  - latest

- name: Ensure optional repos enabled (RedHat Only)
  shell: subscription-manager repos --enable rhel-7-server-optional-rpms
  when: ansible_distribution == "RedHat"
  tags:
  - latest

- name: ensure libselinux-python installed prior to SELinux (RedHat/CentOS only)
  yum: name=libselinux-python state=installed
  when: ansible_os_family == "RedHat"
  tags:
  - latest

- name: Ensure base packages installed
  package:
    name:
      - ntp
      - ntpdate
      - ntp-doc
      - openssh-server
      - "{{ package_openssh_client }}"
      - vim
      - git
      - net-tools
      - "{{ package_firewall }}"
      - rsyslog
      - jq
      - tree
      - "{{ package_cron }}"
      - rsync
    state: present
  tags:
  - latest

- name: Ensure selinux-policy installed (RedHat/CentOS only)
  yum:
    name: selinux-policy
    state: latest
  when: ansible_os_family == "RedHat"
  tags:
  - latest

- name: put SELinux in permissive mode (RedHat/CentOS only)
  selinux:
    policy: targeted
    state: permissive # log actions that would be blocked if state=enforcing
  when: ansible_os_family == "RedHat"

- name: Ensure firewalld is running and enable it at boot (RedHat/CentOS only)
  service:
    name: firewalld
    state: started
    enabled: yes
  when:
    - docker_skip_tasks is not defined or not docker_skip_tasks
    - ansible_os_family == "RedHat"

- name: Ensure UFW is enabled and denying access by default (Debian only)
  ufw:
    state: enabled
    direction: incoming
    policy: deny
  when:
    - docker_skip_tasks is not defined or not docker_skip_tasks
    - ansible_os_family == "Debian"

# Make sure we don't block SSH right away. Not sure why this isn't required for
# firewalld/centos...must be different defaults.
- ufw:
    rule: allow
    name: OpenSSH
  when:
    - docker_skip_tasks is not defined or not docker_skip_tasks
    - ansible_os_family == "Debian"


#
# SSH config
#
- name: Ensure sshd is running and enabled
  service:
    name: "{{ service_ssh }}"
    state: started
    enabled: yes
  when: docker_skip_tasks is not defined or not docker_skip_tasks

- name: Ensure SSH client and SSH Daemon configs in place
  template:
    src: "ssh_config.j2"
    dest: "/etc/ssh/ssh_config"
    owner: root
    group: root
    mode: "0644"
  when: use_default_ssh_config

- name: Ensure SSH client and SSH Daemon configs in place
  template:
    src: "sshd_config.j2"
    dest: "/etc/ssh/sshd_config"
    owner: root
    group: root
    mode: "0600"
  when: use_default_ssh_config
  notify:
    - restart sshd


# Replace the following shell commands:
# chkconfig ntpd on # Activate service
# ntpdate pool.ntp.org # Synchronize the system clock with 0.pool.ntp.org server
# service ntpd start # Start service
# FIXME: this is duplicated from above, right? No reason it needs to be here twice?
- name: Install NTP
  package: name=ntp state=installed
  tags:
  - latest

- name: Ensure NTP is running and enabled as configured.
  service:
    name: "{{ service_ntp }}"
    state: started
    enabled: yes
  when: docker_skip_tasks is not defined or not docker_skip_tasks

- name: Copy the ntp.conf template file
  template: src=ntp.conf.j2 dest=/etc/ntp.conf
  notify:
    - restart ntp

# FIXME #809: PIP required first; has dependencies; needed on all hosts?
# Speed up encrypt/decrypt operations
# ref: http://docs.ansible.com/ansible/playbooks_vault.html#speeding-up-vault-operations
# - name: Ensure PIP cryptography package installed
#   pip:
#     name: cryptography

- name: Ensure deploy directory in place
  file:
    path: "{{ m_deploy }}"
    state: directory
    owner: root
    group: root
    mode: 0755

- name: "Ensure {{ m_tmp }} exists"
  file:
    path: "{{ m_tmp }}"
    owner: meza-ansible
    group: wheel
    mode: 0755
    state: directory

- name: "Ensure {{ m_logs }} exists"
  file:
    path: "{{ m_logs }}"
    owner: "{{ m_logs_owner }}"
    group: "{{ m_logs_group }}"
    mode: "{{ m_logs_mode }}"
    state: directory

- name: "Ensure {{ m_logs }} sub directories exist"
  file:
    path: "{{ m_logs }}/{{ item }}"
    owner: "{{ m_logs_owner }}"
    group: "{{ m_logs_group }}"
    mode: "{{ m_logs_mode }}"
    state: directory
  with_items:
    - jobqueue
    - php
    - deploy
    - deploy-output
    - usr
    - cleanup

# Prevent runJobs and other scripts from running when application may be in
# indeterminate state
- name: Ensure crontab empty for meza-ansible when overwriting wikis
  shell: crontab -u meza-ansible -r
  when: force_overwrite_from_backup is defined and force_overwrite_from_backup == true

  # Ignore errors due issue #699: If a crontab doesn't exist yet this command
  # will fail
  failed_when: False


- name: Ensure CA package installed
  package:
    name: ca-certificates
    state: present

# Ref: http://docs.ansible.com/ansible/playbooks_loops.html#id4
- name: Copy any custom PEM-format CA certs into place
  copy:
    src: "{{ item }}"
    dest: "{{ path_custom_pem_ca_trust }}"
    owner: root
    mode: "0755"
  with_fileglob:
    - "{{ m_local_public }}/custom-pem-ca-trust/*"
  register: new_custom_pem_ca_certs

- name: Copy any custom OpenSSL extended-format CA certs into place
  copy:
    src: "{{ item }}"
    dest: "{{ path_custom_extended_ca_trust }}"
    owner: root
    mode: "0755"
  with_fileglob:
    - "{{ m_local_public }}/custom-extended-ca-trust/*"
  register: new_custom_extended_ca_certs

- name: Update CA trust if certs changed
  shell: "{{ command_update_ca_trust }}"
  when: new_custom_pem_ca_certs.changed or new_custom_extended_ca_certs.changed

- name: Ensure meza-ansible has .gitconfig
  template:
    src: "gitconfig.j2"
    dest: "{{ m_home }}/meza-ansible/.gitconfig"
    owner: "meza-ansible"
    group: "wheel"
    mode: 0644
